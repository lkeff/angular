#!/usr/bin/env node
"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const localize_1 = require("@angular/compiler-cli/private/localize");
const tinyglobby_1 = require("tinyglobby");
const yargs_1 = __importDefault(require("yargs"));
const index_1 = require("./index");
const args = process.argv.slice(2);
const options = (0, yargs_1.default)(args)
    .option('r', {
    alias: 'root',
    default: '.',
    describe: 'The root path for other paths provided in these options.\n' +
        'This should either be absolute or relative to the current working directory.',
    type: 'string',
})
    .option('f', {
    alias: 'files',
    required: true,
    describe: 'A glob pattern indicating what files to migrate. This should be relative to the root path',
    type: 'string',
})
    .option('m', {
    alias: 'mapFile',
    required: true,
    describe: 'Path to the migration mapping file generated by `localize-extract`. This should be relative to the root path.',
    type: 'string',
})
    .strict()
    .help()
    .parseSync();
const fs = new localize_1.NodeJSFileSystem();
(0, localize_1.setFileSystem)(fs);
const rootPath = options.r;
const translationFilePaths = (0, tinyglobby_1.globSync)(options.f, { cwd: rootPath, onlyFiles: true });
const logger = new localize_1.ConsoleLogger(localize_1.LogLevel.warn);
(0, index_1.migrateFiles)({ rootPath, translationFilePaths, mappingFilePath: options.m, logger });
process.exit(0);
