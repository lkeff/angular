"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluralFunction = getPluralFunction;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
const runfiles_1 = require("@bazel/runfiles");
// There are no types available for `cldr`.
const { load: createCldr } = await Promise.resolve(`${'cldr'}`).then(s => __importStar(require(s)));
// Load once to avoid re-parsing CLDR XML data on every invocation.
const cldr = createCldr(runfiles_1.runfiles.resolve('cldr_xml_data'));
/**
 * Returns the plural function for a locale.
 */
function getPluralFunction(localeData, withTypes = true) {
    // We use the resolved bundle for extracting the plural function. This matches with the
    // lookup logic used by other extractions in the tool (using `cldrjs`), and also ensures
    // we follow the CLDR-specified bundle lookup algorithm. A language does not necessarily
    // resolve directly to a bundle CLDR provides data for.
    const bundleName = localeData.attributes.bundle;
    let fn = cldr.extractPluralRuleFunction(bundleName).toString();
    const numberType = withTypes ? ': number' : '';
    fn = fn
        .replace(/function anonymous\(val[^)]+\)/g, `function plural(val${numberType})${numberType}`)
        // Since our generated plural functions only take numbers, we can eliminate some of
        // the logic generated by the `cldr` package (to reduce payload size).
        .replace(/n\s+=\s+Number\(val\)/, 'n = val')
        .replace(/if\s+\(isNaN\(n\)\)\s+throw Error\([^)]+\);/, '');
    // The replacement values must match the `Plural` enum from common.
    // We do not use the enum directly to avoid depending on that package.
    return fn
        .replace(/["']zero["']/, '0')
        .replace(/["']one["']/, '1')
        .replace(/["']two["']/, '2')
        .replace(/["']few["']/, '3')
        .replace(/["']many["']/, '4')
        .replace(/["']other["']/, '5');
}
