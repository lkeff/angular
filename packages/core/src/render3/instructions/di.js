"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ɵɵdirectiveInject = ɵɵdirectiveInject;
exports.ɵɵinvalidFactory = ɵɵinvalidFactory;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.dev/license
 */
const di_1 = require("../../di");
const inject_switch_1 = require("../../di/inject_switch");
const injector_compatibility_1 = require("../../di/injector_compatibility");
const injector_profiler_1 = require("../debug/injector_profiler");
const di_2 = require("../di");
const state_1 = require("../state");
function ɵɵdirectiveInject(token, flags = 0 /* InternalInjectFlags.Default */) {
    const lView = (0, state_1.getLView)();
    // Fall back to inject() if view hasn't been created. This situation can happen in tests
    // if inject utilities are used before bootstrapping.
    if (lView === null) {
        // Verify that we will not get into infinite loop.
        ngDevMode && (0, inject_switch_1.assertInjectImplementationNotEqual)(ɵɵdirectiveInject);
        return (0, injector_compatibility_1.ɵɵinject)(token, flags);
    }
    const tNode = (0, state_1.getCurrentTNode)();
    const value = (0, di_2.getOrCreateInjectable)(tNode, lView, (0, di_1.resolveForwardRef)(token), flags);
    ngDevMode && (0, injector_profiler_1.emitInjectEvent)(token, value, flags);
    return value;
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * @codeGenApi
 */
function ɵɵinvalidFactory() {
    const msg = ngDevMode
        ? `This constructor was not compatible with Dependency Injection.`
        : 'invalid';
    throw new Error(msg);
}
